use env_logger::Env;
use newsletter::{configuration, startup};
use sqlx::PgPool;

// Tip: install `cargo expand` to inspect the boilerplate code generated by the `tokio::main`
// procedural macro:
// 1. `rustup toolchain install nightly --allow-downgrade` (if not yet installed)
// 2. `cargo +nightly expand --bin newsletter`
#[tokio::main]
async fn main() -> std::io::Result<()> {
    env_logger::Builder::from_env(Env::default().default_filter_or("info ")).init();

    let config = configuration::parse().expect("Failed to parse the application config");

    let listener = config
        .server
        .listener()
        .expect("Failed to produce the application listener");

    let pool = PgPool::connect(&config.database.connection_string())
        .await
        .expect("Failed to connect to the database");

    if config.database.migrate {
        log::info!("Running database migrations");
        sqlx::migrate!("./migrations")
            .run(&pool)
            .await
            .expect("Failed to migrate the database");
    }

    startup::run_server(listener, pool)?.await
}
